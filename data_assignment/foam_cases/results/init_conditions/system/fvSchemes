/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2206                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// ****** ddt schemes
// quick
// ddtSchemes
// {
//     default Euler;
// }

// more accurate
ddtSchemes
{
    default backward;
}



// ****** divergence Schemes
// first order divSchemes
// divSchemes
// {
//     div(phi,U)                           Gauss upwind;
//     div(phi,omega)                       Gauss upwind;
//     div(phi,k)                           Gauss upwind;
//     div(phi,K)                           Gauss upwind;
//     div(phi,e)                           Gauss upwind;
//     div(phiv,p)                          Gauss upwind;
//     div((nuEff*dev2(T(grad(U)))))        Gauss linear;
//     div(((rho*nuEff)*dev2(T(grad(U)))))  Gauss linear;
// }

// second order divSchemes
divSchemes
{
    div(phi,U)                      Gauss linearUpwind grad(U);
    div(phi,omega)                  Gauss linearUpwind grad(omega);
    div(phi,k)                      Gauss linearUpwind grad(omega);
    div(phi,e)                      Gauss limitedLinear 0.7;
    div(phi,K)                      Gauss linear;
    div(phiv,p)                     Gauss linear;
    div((nuEff*dev2(T(grad(U)))))   Gauss limitedLinear 0.8;
    div(((rho*nuEff)*dev2(T(grad(U)))))  Gauss linear;
}

// second order divSchemes, more accurate but oscillatory
// divSchemes
// {
//     div(phi,U)                       Gauss linear;
//     div(phi,omega)                   Gauss limitedLinear 1;
//     div(phi,k)                       Gauss limitedLinear 1;
//     div(phi,K)                       Gauss limitedLinear 1;
//     div(phi,e)                       Gauss limitedLinear 1;
//     div(phiv,p)                      Gauss limitedLinear 1;
//     div((nuEff*dev2(T(grad(U)))))    Gauss linear;
//     div(((rho*nuEff)*dev2(T(grad(U)))))  Gauss linear;
// }

// ****** gradient schemes

// non-ortho 70 - 85
// gradSchemes
// {
//     default     cellLimited Gauss linear 0.5;
//     grad(U)     cellLimited Gauss linear 1.0;
// }

// non-ortho 60 - 70
gradSchemes
{
    default     cellLimited Gauss linear 0.5;
    grad(U)     cellLimited Gauss linear 0.5;
}

// non-ortho 40 - 60
// gradSchemes
// {
//     default     cellLimited Gauss linear 0;
//     grad(U)     cellLimited Gauss linear 0.333;
// }




// ****** Laplacian schemes
// nice orthogonal meshes
// laplacianSchemes
// {
//     default Gauss linear orthogonal;
// }
// 
// snGradSchemes
// {
//     default orthogonal;
// }
// 
// mostly orthogonal meshes
laplacianSchemes
{
    default Gauss linear limited 1;
}
snGradSchemes
{
    default limited 1;
}

// non-orthogonal meshes
// laplacianSchemes
// {
//     default Gauss linear limited 0.5;
// }
// snGradSchemes
// {
//     default limited 0.5;
// }

interpolationSchemes
{
    default          midPoint;
    reconstruct(rho) vanLeer;
    reconstruct(U)   vanLeerV;
    reconstruct(T)   vanLeer;
}


wallDist
{
    method          meshWave;
}

// ************************************************************************* //
